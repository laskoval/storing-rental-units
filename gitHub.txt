[?1034hbash-4.2$ cat storage.h
#include "dateType.h"
#include <iostream>

#ifndef STORAGE_H
#define STORAGE_H


class storageType {

public:
   storageType();
   int rentUnit(int pCustomer, int month, int day, int year);
   int emptyUnit(int pCustomer);
   friend ostream& operator<< (ostream& osObject, const storageType& pstorage);

private:
   int units[UNITS];
   dateType dates[UNITS];
};

#include "storageImp.cpp"
#endif
bash-4.2$ cat storageImo[Kp.cpp

#include <iostream>
#include <iomanip>
using namespace std;

//set units to be empty
 storageType::storageType() {
   for (int i = 1; i < UNITS+1; i++) {
        units[i] = 0;
 }
  }

 int storageType::rentUnit(int pCustomer, int month, int day, int year) {
 int i = 1;
    while (i < UNITS+1 && units[i] != 0) {
        i++;
    }
    if (i == UNITS+1) {
        return 0; 
    } else {
        units[i] = pCustomer;//store the customer ID
        dates[i].setDate(month, day, year);//store the date
        return i;
    }
 }    

 int storageType::emptyUnit(int pCustomer) {
 int emptiedUnits = 0;
 for(int i=1; i < UNITS+1; i++){
  if(units[i]== pCustomer){
 units[i] = 0;
 emptiedUnits++;
   }
  }
  return emptiedUnits;
 }


bash-4.2$ cat main.cpp
//Title:    Dual Rental Reports
//////Name:     Lidia Laskova
//////This program stores rental units with a certain customer ID
//////The program shows a menu with 4 options:
////// R - rent the unit
////// E - empty the unit
////// S - summary report for all units which will be displayed on the screen 
//         and sent to the text file
////// Q - quit the program

#include <iostream>
#include <fstream>
#include <iomanip>
const int UNITS = 6; //Number of units
#include "dateType.h"
#include "storage.h"

using namespace std;

int validation(); //function to validate the customer ID
void showMenu(); 

const int MINIMUM_NUMBER = 10000; //minimum number for customer ID
const int MAXIMUM_NUMBER = 99999; //maximum number for customer ID

int main() {


storageType storage;

 char choice = ' '; // variable for menu choice

 showMenu();
 cin >> choice;
//depending on which letter the user puts, do different actions
 while(choice !='Q' && choice!='q')
 {
  switch(choice) {
//Let the user rent the unit tracking the date
  case 'R':
  case 'r':
 {
  int customerNumber = validation(); //validate the entered customer ID
  int month; 
  int day;
  int year;
  cout << "Please enter the date " << endl;
  cin >> month >> day >> year; 
   
  int unitNumber = 0;
   unitNumber = storage.rentUnit(customerNumber, month, day, year);
 if(unitNumber != 0)
   cout << "The unit has been successfully rented by number " << unitNumber<< endl;
 else 
 cout << "There is no available space. Please try again later." << endl; 
 }
 break;
//Let the user to empty rented units
 case 'E':
 case 'e':
 {
 int customerNumber = validation();
 
 int emptiedUnits = 0;
 emptiedUnits = storage.emptyUnit(customerNumber);
 if (emptiedUnits > 0)
   cout << "Successfully emptied " << endl;
 else{ 
  cout << "There were no units by " << customerNumber;
  cout  << " customer number" << endl;
   }
  }
 break;
//Show the summary report
 case 'S':
 case 's':
 { 
  ofstream output("storage.txt");
  cout << storage;
  output << storage;
  output.close();
 }
 break;

 default:
  cout << "Invalid selection." << endl;
 
   }//end of switch
  showMenu();		
  cin >>choice;
  }//end of while
  return 0;
 }

int validation()
//Validate the number for Customer ID
//The number should be between the minimum and the maximum values
 {
int customerNumber=0;
 do{
   cout << "Please enter the valid customer number " << endl;
   cin >> customerNumber;
 }while
   ((customerNumber < MINIMUM_NUMBER) || (customerNumber > MAXIMUM_NUMBER));
 return customerNumber;
 }
 
void showMenu() {
// Show the menu with 4 options:
// Rent the unit
// Empty the unit
// Summary report of all units
// Quit the program
  cout << "Enter R for Rent Unit " << endl;
  cout << "Enter E for Empty Unit " << endl;
  cout << "Enter S for Summary report " << endl;
  cout << "Enter Q for Quit " << endl;
 }

ostream& operator<< (ostream& osObject, const storageType& pstorage) {

//Function that shows output
cout << fixed;
osObject << setw(10) << "Unit Number " << setw(12) << "Customer ID";
osObject << setw(9)<< "Date" << endl;
 for(int i=1; i< UNITS+1; i++) {
  if(pstorage.units[i]!=0) {
   osObject << setw(5) << i << setw(14) << pstorage.units[i];
   osObject << setw(9);
   osObject << pstorage.dates[i].getDay() << "-";
   osObject << pstorage.dates[i].getMonth()<< "-";
   osObject << pstorage.dates[i].getYear();
   osObject << endl;
    }  
 } 
 return osObject;

 }
bash-4.2$ c++ main.cpp
bash-4.2$ ./a.out
Enter R for Rent Unit 
Enter E for Empty Unit 
Enter S for Summary report 
Enter Q for Quit 
R
Please enter the valid customer number 
11111 1 
Please enter the date 
11 11 2022
The unit has been successfully rented by number 1
Enter R for Rent Unit 
Enter E for Empty Unit 
Enter S for Summary report 
Enter Q for Quit 
R
Please enter the valid customer number 
22222
Please enter the date 
5 5 2022
The unit has been successfully rented by number 2
Enter R for Rent Unit 
Enter E for Empty Unit 
Enter S for Summary report 
Enter Q for Quit 
R
Please enter the valid customer number 
33333
Please enter the date 
3 3 2023
The unit has been successfully rented by number 3
Enter R for Rent Unit 
Enter E for Empty Unit 
Enter S for Summary report 
Enter Q for Quit 
S
Unit Number  Customer ID     Date
    1         11111       11-11-2022
    2         22222        5-5-2022
    3         33333        3-3-2023
Enter R for Rent Unit 
Enter E for Empty Unit 
Enter S for Summary report 
Enter Q for Quit 
Q
bash-4.2$ CA[K[Kcat storage.txt
Unit Number  Customer ID     Date
    1         11111       11-11-2022
    2         22222        5-5-2022
    3         33333        3-3-2023
bash-4.2$ exit